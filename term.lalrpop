use std::str::FromStr;
use crate::ast::{Term, Op, Sub};

grammar;

pub Sub: Sub = {
    "Sub" "(" <v:Var> "," <t1:Term> ")" "[" <t2:Term> "]" => Sub { var:v, term1:*t1, term2:*t2 },
    <t2:Term> "[" <v:Var> ":=" <t1:Term> "]" => Sub { var:v, term1:*t1, term2:*t2 },
};

pub Terms: Box<Term> = {
    <ts:Terms> <t:Term> => {
        Box::new(Term::App(ts, t))
    },
    <t:Term> => t
}

pub Term: Box<Term> = {
    <app:App> => app,
    <abs:Abs> => abs,
    <op:Op> => op,
    <v:Var> => Box::new(Term::Var(v)),
    <n:Num> => Box::new(Term::Constant(n)),
    "(" <s:Sub> ")" => Box::new(s.create_term())
}

Op: Box<Term> = {
    "(" <t1:Term> <op:TermOp> <t2:Term> ")" => Box::new(Term::BinOp(op, t1, t2)),
}

App: Box<Term> = {
    "(" <t1:Terms> <t2:Term> ")" => Box::new(Term::App(t1, t2)),
}

Abs: Box<Term> = {
    "(" "λ" <v:Var> <t1:Term> ")" => Box::new(Term::Abs(v, t1)),
    "(" "λ" <vs:Vars> "." <t1:Terms> ")" => {
        Term::create_nested_abs(vs, t1)
    },
    // "λ" <vs:Vars> "." <t1:Terms> => {
    //     Term::create_nested_abs(vs, t1)
    // }
}

Vars: Vec<u8> = {
    <v:Var> <vs:Vars> => {
        let mut vs = vs;
        vs.push(v);
        vs
    },
    <v:Var> => vec![v],
}

Var: u8 = {
    <s:r"[a-z]"> => s.as_bytes()[0],
}

Num: i32 = {
    <n:r"[0-9]+"> => i32::from_str(n).unwrap(),
}

TermOp: Op = {
    "*" => Op::Mul,
    "/" => Op::Div,
    "+" => Op::Add,
    "-" => Op::Sub,
}

// pub Term: Box<Term> = {
//     "(" <t1:Term> <t2:Term> ")" => Box::new(Term::App(t1, t2)),
//     "(" <t1:Term> <op:TermOp> <t2:Term> ")" => Box::new(Term::BinOp(op, t1, t2)),
//     "(λ" <s:r"[a-z]"> <t1:Term> ")" => Box::new(Term::Abs(s.as_bytes()[0], t1)),
//     "(λ" <s:r"[a-z]+\."> <t1:Term> ")" => {
//         let mut t = t1;
//         for (i, var) in s.as_bytes().to_vec().iter().rev().enumerate() {
//             if i != 0 {
//                 t = Box::new(Term::Abs(*var, t));
//             }
//         }
//         t
//     },
//     <s:r"[a-z]"> => Box::new(Term::Var(s.as_bytes()[0])),
//     <n:r"[0-9]+"> => Box::new(Term::Constant(i32::from_str(n).unwrap())),
// }