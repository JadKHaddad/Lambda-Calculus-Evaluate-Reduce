# Dot operator. Note: `.` can only be placed with a blank space before it.
- term: (λz . (xx))
- term: ((λx . (xx))(λx . (xx)))
# No Outer Parenthesis with Dot Operator
- term: λz . (xx)
- term: λxyzu . (xx)
# End of `No Outer Parenthesis with Dot Operator`
# End of `Dot operator`

- term: (λa (λb (λc (x x))))
- term: ((λx (x * ((λx (x + ((λx x) 3))) 8))) 3)
  evaluate: true
- term: ((λx ((λy (x * y)) 4)) 3)
  evaluate: true
  print_ast: true
- term: ((λx ((λy (x + y)) 8)) 100)
  evaluate: true
- term: (((λx (λx (f x))) x) ((λx x) z))
  reduce: true
  reduce_steps: 2
- term: ((((λx (x y)) (λz (x z))) f) (g h))
  reduce: true
  reduce_steps: 2
- term: ((λxyz . ((xz)y))(λxw. x))
  reduce: true
  reduce_steps: 3
- term: ((λx((λy((x+y)*y))3))4)
  evaluate: true
  print_ast: true
- term: (((ux)(yz))(λv(vy)))
  print_ast: true
- term: ((((λx(λy(λz((xz)(yz)))))u)v)w)
  print_ast: true
- term: (((w(λx(λy(λz((xz)(yz))))))u)v)
  print_ast: true           
- term: ((λx(xx))(λx(xx)))
  print_ast: true

# Bound and free variables
- term: ((λx ((yz)(λx(λy(yx)))))z)
  print_bound_variables: true
  print_free_variables: true
- term: ((xz)(λx(λyx)))
  print_bound_variables: true
  print_free_variables: true
# End of `Bound and free variables`

# Substitutions as lambda terms.
# you can parse substitution as 
# substitution with the SubParser 
# and convert them to terms using `create_retrm()`.
# for this matter you must get rid of the outer Parenthesis
# `Sub(y, (λx(λy x)))[(y(λx(yx)))]` or `(y (λx (y x)))[y := (λx (λy x))]`
- term: (Sub(y, (λx(λy x)))[(y(λx(yx)))])
- term: ((y (λx (y x)))[y := (λx (λy x))])
# End of `Substitutions as lambda terms`